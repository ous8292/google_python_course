Implicit conversion is where the interpreter helps us out and automatically converts one data type into another, without having to explicitly tell it to do so.



Conditionals Cheat Sheet
In earlier videos, we took a look at some of the built-in Python operators that allow us to compare values, and some logical operators we can use to combine values. We also learned how to use operators in if-else-elif blocks. 

It’s a lot to learn but, with practice, it gets easier to remember it all. In the meantime, this handy cheat sheet gives you all the information you need at a glance. 

Comparison operators
a == b: a is equal to b
a != b: a is different than b
a < b: a is smaller than b
a <= b: a is smaller or equal to b
a > b: a is bigger than b
a >= b: a is bigger or equal to b
Logical operators
a and b: True if both a and b are True. False otherwise.
a or b: True if either a or b or both are True. False if both are False.
not a: True if a is False, False if a is True.
Branching blocks

In Python, we branch our code using if, else and elif. This is the branching syntax:

1234567
if condition1:
	if-block
elif condition2:
	elif-block
else:
	else-block

Remember: The if-block will be executed if condition1 is True. The elif-block will be executed if condition1 is False and condition2 is True. The else block will be executed when all the specified conditions are false.




To quickly recap the range() function when passing one, two, or three parameters:

One parameter will create a sequence, one-by-one, from zero to one less than the parameter.
Two parameters will create a sequence, one-by-one, from the first parameter to one less than the second parameter.
Three parameters will create a sequence starting with the first parameter and stopping before the second parameter, but this time increasing each step by the third parameter.





String Reference Cheat Sheet
In Python, there are a lot of things you can do with strings. In this cheat sheet, you’ll find the most common string operations and string methods.

String operations
len(string) Returns the length of the string
for character in string Iterates over each character in the string
if substring in string Checks whether the substring is part of the string
string[i] Accesses the character at index i of the string, starting at zero
string[i:j] Accesses the substring starting at index i, ending at index j-1. If i is omitted, it's 0 by default. If j is omitted, it's len(string) by default.
String methods
string.lower() / string.upper() Returns a copy of the string with all lower / upper case characters
string.lstrip() / string.rstrip() / string.strip() Returns a copy of the string without left / right / left or right whitespace
string.count(substring) Returns the number of times substring is present in the string
string.isnumeric() Returns True if there are only numeric characters in the string. If not, returns False.
string.isalpha() Returns True if there are only alphabetic characters in the string. If not, returns False.
string.split() / string.split(delimiter) Returns a list of substrings that were separated by whitespace / delimiter
string.replace(old, new) Returns a new string where all occurrences of old have been replaced by new.
delimiter.join(list of strings) Returns a new string with all the strings joined by the delimiter 












Lists

In Python, lists and strings are quite similar. They’re both examples of sequences of data. Sequences have similar properties, like 
	(1) being able to iterate over them using for loops; 
	(2) support indexing; 
	(3) using the len function to find the length of the sequence; 
	(4) using the plus operator + in order to concatenate;
	(5) using the in keyword to check if the sequence contains a value. 

Understanding these concepts allows you to apply them to other sequence types as well.

You can add elements to the end of a list using the append method
	For example, list.append("New data")
If you want to add an element to a list in a specific position, you can use the method insert.
	So list.insert(0, "New data") would add the string "New data" to the front of the list
You can remove elements from the list using the remove method
	This method takes an element as a parameter, and removes the first occurrence of the element
You can also remove elements from a list using the pop method
	This method differs from the remove method in that it takes an index as a parameter, and returns the element that was removed.
Finally, you can change an element in a list by using indexing to overwrite the value stored at the specified index. For example, 
	you can enter list[0] = "Old data" to overwrite the first element in a list with the new string "Old data".




Tuples

strings and lists are both examples of sequences. 
Strings are sequences of characters, and are immutable. 
Lists are sequences of elements of any data type, and are mutable

Tuples are like lists, since they can contain elements of any data type. 
But unlike lists, tuples are immutable. They’re specified using parentheses instead of square brackets.




The enumerate() function takes a list as a parameter and returns a tuple for each element in the list. 
The first value of the tuple is the index and the second value is the element itself



List Comparison
	List comprehensions let us create new lists based on sequences or ranges

For example, [ x*2 for x in range(1,11) ] is a simple list comprehension. 
This would iterate over the range 1 to 10, and multiply each element in the range by 2. 
This would result in a list of the multiples of 2, from 2 to 20.


Lists and Tuples Operations Cheat Sheet


Lists and tuples are both sequences, so they share a number of sequence operations. 
But, because lists are mutable, there are also a number of methods specific just to lists. 
This cheat sheet gives you a run down of the common operations first, and the list-specific operations second.

Common sequence operations
len(sequence) Returns the length of the sequence
for element in sequence Iterates over each element in the sequence
if element in sequence Checks whether the element is part of the sequence
sequence[i] Accesses the element at index i of the sequence, starting at zero
sequence[i:j] Accesses a slice starting at index i, ending at index j-1. If i is omitted, it's 0 by default. If j is omitted, it's len(sequence) by default.
for index, element in enumerate(sequence) Iterates over both the indexes and the elements in the sequence at the same time
 Check out the official documentation for sequence operations.

List-specific operations and methods
list[i] = x Replaces the element at index i with x
list.append(x) Inserts x at the end of the list
list.insert(i, x) Inserts x at index i
list.pop(i) Returns the element a index i, also removing it from the list. If i is omitted, the last element is returned and removed.
list.remove(x) Removes the first occurrence of x in the list
list.sort() Sorts the items in the list
list.reverse() Reverses the order of items of the list
list.clear() Removes all the items of the list
list.copy() Creates a copy of the list
list.extend(other_list) Appends all the elements of other_list at the end of list
 Most of these methods come from the fact that lists are mutable sequences. For more info, see the official documentation for mutable sequences and the list specific documentation.

List comprehension
[expression for variable in sequence] Creates a new list based on the given sequence. Each element is the result of the given expression.
[expression for variable in sequence if condition] Creates a new list based on the given sequence. 
Each element is the result of the given expression; elements only get added if the condition is true.  